"use strict";
var Player = require("./mongoose/player");
function players(app) {
    /* Create */
    app.post('/api/player', function (req, res) {
        var newPlayer = new Player(req.body);
        newPlayer.save(function (err) {
            if (err) {
                res.json({ info: 'error during player create', error: err });
            }
            res.json({ info: 'player saved successfully', data: newPlayer });
        });
    });
    /* Read */
    app.get('/api/player', function (req, res) {
        Player.find(function (err, players) {
            if (err) {
                res.json({ info: 'error during find players', error: err });
            }
            ;
            res.json({ info: 'players found successfully', data: players });
        });
    });
    app.get('/api/player/:name', function (req, res) {
        var query = { name: req.params.name };
        Player.findOne(query, function (err, player) {
            if (err) {
                res.json({ info: 'error during find player', error: err });
            }
            ;
            if (player) {
                res.json({ info: 'player found successfully', data: player });
            }
            else {
                res.json({ info: 'player not found with name:' + req.params.name });
            }
        });
    });
}
exports.players = players;
;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS9wbGF5ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUdBLElBQVksTUFBTSxXQUFNLG1CQUFtQixDQUFDLENBQUE7QUFHNUMsaUJBQXdCLEdBQW1CO0lBRXZDLFlBQVk7SUFDWixHQUFHLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxVQUFVLEdBQUcsRUFBRSxHQUFHO1FBQ3RDLElBQUksU0FBUyxHQUFHLElBQUksTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNyQyxTQUFTLENBQUMsSUFBSSxDQUFDLFVBQUMsR0FBRztZQUNmLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFBLENBQUM7Z0JBQ0wsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFDLElBQUksRUFBRSw0QkFBNEIsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFDLENBQUMsQ0FBQztZQUMvRCxDQUFDO1lBQ0QsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFDLElBQUksRUFBRSwyQkFBMkIsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFDLENBQUMsQ0FBQztRQUNuRSxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUMsQ0FBQyxDQUFDO0lBRUgsVUFBVTtJQUNWLEdBQUcsQ0FBQyxHQUFHLENBQUMsYUFBYSxFQUFFLFVBQVUsR0FBRyxFQUFFLEdBQUc7UUFDckMsTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFDLEdBQUcsRUFBRSxPQUFPO1lBQ3JCLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7Z0JBQ04sR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFDLElBQUksRUFBRSwyQkFBMkIsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFDLENBQUMsQ0FBQztZQUM5RCxDQUFDO1lBQUEsQ0FBQztZQUNGLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBQyxJQUFJLEVBQUUsNEJBQTRCLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7UUFDbEUsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDLENBQUMsQ0FBQztJQUVILEdBQUcsQ0FBQyxHQUFHLENBQUMsbUJBQW1CLEVBQUUsVUFBVSxHQUFHLEVBQUUsR0FBRztRQUMzQyxJQUFJLEtBQUssR0FBRyxFQUFFLElBQUksRUFBRSxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksRUFBQyxDQUFDO1FBQ3JDLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLFVBQVMsR0FBRyxFQUFFLE1BQU07WUFDdEMsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztnQkFDTixHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUMsSUFBSSxFQUFFLDBCQUEwQixFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUMsQ0FBQyxDQUFDO1lBQzdELENBQUM7WUFBQSxDQUFDO1lBQ0YsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztnQkFDVCxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUMsSUFBSSxFQUFFLDJCQUEyQixFQUFFLElBQUksRUFBRSxNQUFNLEVBQUMsQ0FBQyxDQUFDO1lBQ2hFLENBQUM7WUFBQyxJQUFJLENBQUMsQ0FBQztnQkFDSixHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUMsSUFBSSxFQUFFLDZCQUE2QixHQUFFLEdBQUcsQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFDLENBQUMsQ0FBQztZQUNyRSxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDLENBQUMsQ0FBQztBQUNQLENBQUM7QUFwQ2UsZUFBTyxVQW9DdEIsQ0FBQTtBQUFBLENBQUMiLCJmaWxlIjoiYXBpL3BsYXllci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGV4cHJlc3MgZnJvbSBcImV4cHJlc3NcIjtcbmltcG9ydCAqIGFzIF8gZnJvbSBcImxvZGFzaFwiO1xuaW1wb3J0IHsgSVBsYXllciB9IGZyb20gXCIuLi9tb2RlbC9JUGxheWVyXCI7XG5pbXBvcnQgKiBhcyBQbGF5ZXIgZnJvbSBcIi4vbW9uZ29vc2UvcGxheWVyXCI7XG5pbXBvcnQgeyBDb25maWcgfSBmcm9tIFwiLi4vY29uZmlnL2NvbmZpZ1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gcGxheWVycyhhcHA6ZXhwcmVzcy5FeHByZXNzKSB7XG5cbiAgICAvKiBDcmVhdGUgKi9cbiAgICBhcHAucG9zdCgnL2FwaS9wbGF5ZXInLCBmdW5jdGlvbiAocmVxLCByZXMpIHtcbiAgICAgICAgdmFyIG5ld1BsYXllciA9IG5ldyBQbGF5ZXIocmVxLmJvZHkpO1xuICAgICAgICBuZXdQbGF5ZXIuc2F2ZSgoZXJyKT0+e1xuICAgICAgICAgICAgaWYgKGVycil7XG4gICAgICAgICAgICAgICAgcmVzLmpzb24oe2luZm86ICdlcnJvciBkdXJpbmcgcGxheWVyIGNyZWF0ZScsIGVycm9yOiBlcnJ9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlcy5qc29uKHtpbmZvOiAncGxheWVyIHNhdmVkIHN1Y2Nlc3NmdWxseScsIGRhdGE6IG5ld1BsYXllcn0pOyBcbiAgICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICAvKiBSZWFkICovXG4gICAgYXBwLmdldCgnL2FwaS9wbGF5ZXInLCBmdW5jdGlvbiAocmVxLCByZXMpIHtcbiAgICAgICAgUGxheWVyLmZpbmQoKGVyciwgcGxheWVycykgPT4ge1xuICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgIHJlcy5qc29uKHtpbmZvOiAnZXJyb3IgZHVyaW5nIGZpbmQgcGxheWVycycsIGVycm9yOiBlcnJ9KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXMuanNvbih7aW5mbzogJ3BsYXllcnMgZm91bmQgc3VjY2Vzc2Z1bGx5JywgZGF0YTogcGxheWVyc30pO1xuICAgICAgICB9KTtcbiAgICB9KTtcbiAgICBcbiAgICBhcHAuZ2V0KCcvYXBpL3BsYXllci86bmFtZScsIGZ1bmN0aW9uIChyZXEsIHJlcykge1xuICAgICAgICB2YXIgcXVlcnkgPSB7IG5hbWU6IHJlcS5wYXJhbXMubmFtZX07XG4gICAgICAgIFBsYXllci5maW5kT25lKHF1ZXJ5LCBmdW5jdGlvbihlcnIsIHBsYXllcikge1xuICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgIHJlcy5qc29uKHtpbmZvOiAnZXJyb3IgZHVyaW5nIGZpbmQgcGxheWVyJywgZXJyb3I6IGVycn0pO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGlmIChwbGF5ZXIpIHtcbiAgICAgICAgICAgICAgICByZXMuanNvbih7aW5mbzogJ3BsYXllciBmb3VuZCBzdWNjZXNzZnVsbHknLCBkYXRhOiBwbGF5ZXJ9KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVzLmpzb24oe2luZm86ICdwbGF5ZXIgbm90IGZvdW5kIHdpdGggbmFtZTonKyByZXEucGFyYW1zLm5hbWV9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSk7XG59OyJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
