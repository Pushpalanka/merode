"use strict";
var User = require("./mongoose/user");
function users(app) {
    /* Create */
    app.post('/api/user', function (req, res) {
        var newUser = new User(req.body);
        newUser.save(function (err) {
            if (err) {
                res.json({ info: 'error during user create', error: err });
            }
            res.json({ info: 'user saved successfully', data: newUser });
        });
    });
    /* Read */
    app.get('/api/user', function (req, res) {
        User.find(function (err, users) {
            if (err) {
                res.json({ info: 'error during find users', error: err });
            }
            ;
            res.json({ info: 'users found successfully', data: users });
        });
    });
    app.get('/api/users/:name', function (req, res) {
        var query = { name: req.params.name };
        User.findOne(query, function (err, User) {
            if (err) {
                res.json({ info: 'error during find users', error: err });
            }
            ;
            if (users) {
                res.json({ info: 'users found successfully', data: users });
            }
            else {
                res.json({ info: 'users not found with name:' + req.params.name });
            }
        });
    });
}
exports.users = users;
;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS91c2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFHQSxJQUFZLElBQUksV0FBTSxpQkFBaUIsQ0FBQyxDQUFBO0FBR3hDLGVBQXNCLEdBQW1CO0lBRXJDLFlBQVk7SUFDWixHQUFHLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxVQUFVLEdBQUcsRUFBRSxHQUFHO1FBQ3BDLElBQUksT0FBTyxHQUFHLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNqQyxPQUFPLENBQUMsSUFBSSxDQUFDLFVBQUMsR0FBRztZQUNiLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFBLENBQUM7Z0JBQ0wsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFDLElBQUksRUFBRSwwQkFBMEIsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFDLENBQUMsQ0FBQztZQUM3RCxDQUFDO1lBQ0QsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFDLElBQUksRUFBRSx5QkFBeUIsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFDLENBQUMsQ0FBQztRQUMvRCxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUMsQ0FBQyxDQUFDO0lBRUgsVUFBVTtJQUNWLEdBQUcsQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLFVBQVUsR0FBRyxFQUFFLEdBQUc7UUFDbkMsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFDLEdBQUcsRUFBRSxLQUFLO1lBQ2pCLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7Z0JBQ04sR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFDLElBQUksRUFBRSx5QkFBeUIsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFDLENBQUMsQ0FBQztZQUM1RCxDQUFDO1lBQUEsQ0FBQztZQUNGLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBQyxJQUFJLEVBQUUsMEJBQTBCLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBQyxDQUFDLENBQUM7UUFDOUQsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDLENBQUMsQ0FBQztJQUVILEdBQUcsQ0FBQyxHQUFHLENBQUMsa0JBQWtCLEVBQUUsVUFBVSxHQUFHLEVBQUUsR0FBRztRQUMxQyxJQUFJLEtBQUssR0FBRyxFQUFFLElBQUksRUFBRSxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksRUFBQyxDQUFDO1FBQ3JDLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLFVBQVMsR0FBRyxFQUFFLElBQUk7WUFDbEMsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztnQkFDTixHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUMsSUFBSSxFQUFFLHlCQUF5QixFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUMsQ0FBQyxDQUFDO1lBQzVELENBQUM7WUFBQSxDQUFDO1lBQ0YsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztnQkFDVCxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUMsSUFBSSxFQUFFLDBCQUEwQixFQUFFLElBQUksRUFBRSxLQUFLLEVBQUMsQ0FBQyxDQUFDO1lBQzdELENBQUM7WUFBQyxJQUFJLENBQUMsQ0FBQztnQkFDSixHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUMsSUFBSSxFQUFFLDRCQUE0QixHQUFFLEdBQUcsQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFDLENBQUMsQ0FBQztZQUNwRSxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDLENBQUMsQ0FBQztBQUNQLENBQUM7QUFwQ2UsYUFBSyxRQW9DcEIsQ0FBQTtBQUFBLENBQUMiLCJmaWxlIjoiYXBpL3VzZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBleHByZXNzIGZyb20gXCJleHByZXNzXCI7XG5pbXBvcnQgKiBhcyBfIGZyb20gXCJsb2Rhc2hcIjtcbmltcG9ydCB7IElVc2VyIH0gZnJvbSBcIi4uL21vZGVsL0lVc2VyXCI7XG5pbXBvcnQgKiBhcyBVc2VyIGZyb20gXCIuL21vbmdvb3NlL3VzZXJcIjtcbmltcG9ydCB7IENvbmZpZyB9IGZyb20gXCIuLi9jb25maWcvY29uZmlnXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VycyhhcHA6ZXhwcmVzcy5FeHByZXNzKSB7XG5cbiAgICAvKiBDcmVhdGUgKi9cbiAgICBhcHAucG9zdCgnL2FwaS91c2VyJywgZnVuY3Rpb24gKHJlcSwgcmVzKSB7XG4gICAgICAgIHZhciBuZXdVc2VyID0gbmV3IFVzZXIocmVxLmJvZHkpO1xuICAgICAgICBuZXdVc2VyLnNhdmUoKGVycik9PntcbiAgICAgICAgICAgIGlmIChlcnIpe1xuICAgICAgICAgICAgICAgIHJlcy5qc29uKHtpbmZvOiAnZXJyb3IgZHVyaW5nIHVzZXIgY3JlYXRlJywgZXJyb3I6IGVycn0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVzLmpzb24oe2luZm86ICd1c2VyIHNhdmVkIHN1Y2Nlc3NmdWxseScsIGRhdGE6IG5ld1VzZXJ9KTsgXG4gICAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgLyogUmVhZCAqL1xuICAgIGFwcC5nZXQoJy9hcGkvdXNlcicsIGZ1bmN0aW9uIChyZXEsIHJlcykge1xuICAgICAgICBVc2VyLmZpbmQoKGVyciwgdXNlcnMpID0+IHtcbiAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICByZXMuanNvbih7aW5mbzogJ2Vycm9yIGR1cmluZyBmaW5kIHVzZXJzJywgZXJyb3I6IGVycn0pO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJlcy5qc29uKHtpbmZvOiAndXNlcnMgZm91bmQgc3VjY2Vzc2Z1bGx5JywgZGF0YTogdXNlcnN9KTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG4gICAgXG4gICAgYXBwLmdldCgnL2FwaS91c2Vycy86bmFtZScsIGZ1bmN0aW9uIChyZXEsIHJlcykge1xuICAgICAgICB2YXIgcXVlcnkgPSB7IG5hbWU6IHJlcS5wYXJhbXMubmFtZX07XG4gICAgICAgIFVzZXIuZmluZE9uZShxdWVyeSwgZnVuY3Rpb24oZXJyLCBVc2VyKSB7XG4gICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgcmVzLmpzb24oe2luZm86ICdlcnJvciBkdXJpbmcgZmluZCB1c2VycycsIGVycm9yOiBlcnJ9KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAodXNlcnMpIHtcbiAgICAgICAgICAgICAgIHJlcy5qc29uKHtpbmZvOiAndXNlcnMgZm91bmQgc3VjY2Vzc2Z1bGx5JywgZGF0YTogdXNlcnN9KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVzLmpzb24oe2luZm86ICd1c2VycyBub3QgZm91bmQgd2l0aCBuYW1lOicrIHJlcS5wYXJhbXMubmFtZX0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9KTtcbn07Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
