"use strict";
var User = require("./mongoose/user");
function users(app) {
    /* Create */
    app.put('/api/user', function (req, res) {
        var newUser = new User(req.body);
        newUser.save(function (err) {
            if (err) {
                res.json({ info: 'error during user create', error: err });
            }
            res.json({ info: 'user saved successfully', data: newUser });
        });
    });
    /* Update */
    app.post('/api/user', function (req, res) {
        var newUser = new User(req.body);
        newUser.save(function (err) {
            if (err) {
                res.json({ info: 'error during user create', error: err });
            }
            res.json({ info: 'user saved successfully', data: newUser });
        });
    });
    /* Read */
    app.get('/api/user', function (req, res) {
        User.find(function (err, users) {
            if (err) {
                res.json({ info: 'error during find users', error: err });
            }
            ;
            res.json({ info: 'users found successfully', data: users });
        });
    });
    app.get('/api/users/:name', function (req, res) {
        var query = { name: req.params.name };
        User.findOne(query, function (err, User) {
            if (err) {
                res.json({ info: 'error during find users', error: err });
            }
            ;
            if (users) {
                res.json({ info: 'users found successfully', data: users });
            }
            else {
                res.json({ info: 'users not found with name:' + req.params.name });
            }
        });
    });
}
exports.users = users;
;

//# sourceMappingURL=data:application/json;base64,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QUFDLElBQUksQ0FBQyxDQUFDO2dCQUNKLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBQyxJQUFJLEVBQUUsNEJBQTRCLEdBQUUsR0FBRyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUMsQ0FBQyxDQUFDO1lBQ3BFLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQztBQS9DZSxhQUFLLFFBK0NwQixDQUFBO0FBQUEsQ0FBQyIsImZpbGUiOiJhcGkvdXNlci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGV4cHJlc3MgZnJvbSBcImV4cHJlc3NcIjtcbmltcG9ydCAqIGFzIF8gZnJvbSBcImxvZGFzaFwiO1xuaW1wb3J0IHsgSVVzZXIgfSBmcm9tIFwiLi4vbW9kZWwvSVVzZXJcIjtcbmltcG9ydCAqIGFzIFVzZXIgZnJvbSBcIi4vbW9uZ29vc2UvdXNlclwiO1xuaW1wb3J0IHsgQ29uZmlnIH0gZnJvbSBcIi4uL2NvbmZpZy9jb25maWdcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIHVzZXJzKGFwcDpleHByZXNzLkV4cHJlc3MpIHtcblxuICAgIC8qIENyZWF0ZSAqL1xuICAgIGFwcC5wdXQoJy9hcGkvdXNlcicsIGZ1bmN0aW9uIChyZXEsIHJlcykge1xuICAgICAgICB2YXIgbmV3VXNlciA9IG5ldyBVc2VyKHJlcS5ib2R5KTtcbiAgICAgICAgbmV3VXNlci5zYXZlKChlcnIpPT57XG4gICAgICAgICAgICBpZiAoZXJyKXtcbiAgICAgICAgICAgICAgICByZXMuanNvbih7aW5mbzogJ2Vycm9yIGR1cmluZyB1c2VyIGNyZWF0ZScsIGVycm9yOiBlcnJ9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlcy5qc29uKHtpbmZvOiAndXNlciBzYXZlZCBzdWNjZXNzZnVsbHknLCBkYXRhOiBuZXdVc2VyfSk7IFxuICAgICAgICB9KTtcbiAgICB9KTtcblxuICAgIC8qIFVwZGF0ZSAqL1xuICAgIGFwcC5wb3N0KCcvYXBpL3VzZXInLCBmdW5jdGlvbiAocmVxLCByZXMpIHtcbiAgICAgICAgdmFyIG5ld1VzZXIgPSBuZXcgVXNlcihyZXEuYm9keSk7XG4gICAgICAgIG5ld1VzZXIuc2F2ZSgoZXJyKT0+e1xuICAgICAgICAgICAgaWYgKGVycil7XG4gICAgICAgICAgICAgICAgcmVzLmpzb24oe2luZm86ICdlcnJvciBkdXJpbmcgdXNlciBjcmVhdGUnLCBlcnJvcjogZXJyfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXMuanNvbih7aW5mbzogJ3VzZXIgc2F2ZWQgc3VjY2Vzc2Z1bGx5JywgZGF0YTogbmV3VXNlcn0pOyBcbiAgICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICAvKiBSZWFkICovXG4gICAgYXBwLmdldCgnL2FwaS91c2VyJywgZnVuY3Rpb24gKHJlcSwgcmVzKSB7XG4gICAgICAgIFVzZXIuZmluZCgoZXJyLCB1c2VycykgPT4ge1xuICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgIHJlcy5qc29uKHtpbmZvOiAnZXJyb3IgZHVyaW5nIGZpbmQgdXNlcnMnLCBlcnJvcjogZXJyfSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmVzLmpzb24oe2luZm86ICd1c2VycyBmb3VuZCBzdWNjZXNzZnVsbHknLCBkYXRhOiB1c2Vyc30pO1xuICAgICAgICB9KTtcbiAgICB9KTtcbiAgICBcbiAgICBhcHAuZ2V0KCcvYXBpL3VzZXJzLzpuYW1lJywgZnVuY3Rpb24gKHJlcSwgcmVzKSB7XG4gICAgICAgIHZhciBxdWVyeSA9IHsgbmFtZTogcmVxLnBhcmFtcy5uYW1lfTtcbiAgICAgICAgVXNlci5maW5kT25lKHF1ZXJ5LCBmdW5jdGlvbihlcnIsIFVzZXIpIHtcbiAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICByZXMuanNvbih7aW5mbzogJ2Vycm9yIGR1cmluZyBmaW5kIHVzZXJzJywgZXJyb3I6IGVycn0pO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGlmICh1c2Vycykge1xuICAgICAgICAgICAgICAgcmVzLmpzb24oe2luZm86ICd1c2VycyBmb3VuZCBzdWNjZXNzZnVsbHknLCBkYXRhOiB1c2Vyc30pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXMuanNvbih7aW5mbzogJ3VzZXJzIG5vdCBmb3VuZCB3aXRoIG5hbWU6JysgcmVxLnBhcmFtcy5uYW1lfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0pO1xufTsiXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
